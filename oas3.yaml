openapi: 3.0.0
info:
  version: '1.0'
  title: "Project_30"
  description: Queste sono le API utilizzate nella nostra applicazione che consente ad ogni utente di creare delle collezioni di oggetti personalizzate.
  license:
    name: G30
servers:
  - url: http://localhost:8888/
    description: Localhost
paths:
  /autentication:
    post:
      description: >-
        Autenticazione delle credenziali. Necessarie la email e una password.
      summary: Login utente
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: 'Username dell utente'
                password:
                  type: string
                  description: 'Password dell utente'
      responses:
        '201':
          description: 'Utente autenticato. Link alla home della pagina'
        '500':
          description: 'Errore nel server'
        '400':
          description: 'Errore input'
        '401':
          description: 'Autenticazione fallita'

  /signup:
    post:
      description: >-
        Iscrizione nuovo utente. Necessaria email non ancora registrata e una password.
      summary: Iscrizione utente
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  description: 'Username dell utente'
                email:
                  type: string
                  description: 'Email dell utente'
                password:
                  type: string
                  description: 'Password dell utente'
                
      responses:
        '201':
          description: 'Utente registrato con successo'
        '500':
          description: 'Errore registrazione'
        '400':
          description: 'Errore input'
        '409':
          description: 'Email già registrata'
        
  /collections:
    get:
      description: >-
        Ritorna i nomi e gli id di tutte le collezioni appartenenti ad un utente.
      summary: Ritorna tutte le collezioni ed il loro id
      responses:
        '200':
          description: 'Lista nomi ed id delle collezioni'
        '200':
          description: 'Non esistono collezioni associate allo utente'
        '401':
          description: 'Nessun token fornito.'
        '403':
          description: 'Fallimento autenticazione token.'
        '500':
          description: 'Errore sul db'
  
    post:
      description: >-
        Creazione di una nuova collezione. Necessità del nome che l'utente desidera assegnare alla collezione.
      summary: Creazione collezione
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: 'Nome da assegnare alla collezione'
      responses:
        '201':
          description: 'Collezione creata'
        '500':
          description: 'Errore creazione collezione'
        '400':
          description: 'Campo name mancante nella request'
        '409':
          description: 'Collezione con nome indicato già registrata'
        '401':
          description: 'Nessun token fornito.'
        '403':
          description: 'Fallimento autenticazione token.'

  /objects:
    get:
      description: >-
        Ottenere gli oggetti appartenenti ad una collezione. Necessita di ID collezione.
      summary: Ottenimento oggetti di una collezione
      parameters:
        - in: query
          name: id_coll
          required: true
      responses:
        '200':
          description: 'Ritorna la lista degli oggetti appartenenti alla collezine'
        '200':
          description: 'Oggetti non trovati'
        '400':
          description: 'Campo id_coll non fornito.'
        '401':
          description: 'Nessun token fornito.'
        '403':
          description: 'Fallimento autenticazione token.'
        '500':
          description: 'Errore generico'

    post:
      description: >-
        Creazione di un nuovo oggetto. Necessità ID della collezione e nome dell'oggetto.
      summary: Creazione oggetto
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id_coll
                - name
              properties:
                id_coll:
                  type: string
                  description: 'ID della collezione'
                name:
                  type: string
                  description: "Nome da assegnare all'oggetto"

      responses:
        '201':
          description: 'Oggetto creato'
        '500':
          description: 'Errore generico'
        '400':
          description: 'Nome scorretto'
        '404':
          description: 'Non esiste una collezione con tale id'

components:
  schemas:
    User:
      type: object
        - username
        - email
        - password
      properties:
        username:
          type: string
          description: "Username dell'utente"
        email:
          type: string
          description: "Email dell'utente"
        password:
          type: string
          description: "Password dell'utente"
    Collection:
      type: object
        - username
        - email
      properties:
        username:
          type: string
          description: 'Nome della collezione'
        email:
          type: string
          description: "Email dell'utente associato"
    Object:
      type: object
        - name
        - id_coll
        - tag_list
      properties:
        name:
          type: String
          description: "Nome dell'oggetto"
        id_coll:
          type: String
          description: "Id della collezione a cui appartiene l'oggetto"
        tag_list:
          type: [ {tag: String, value: String} ]
          description: "Array contenente tutti i tag e relativi valori appartenenti all'oggetto"